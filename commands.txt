## commands to run

Step 1 â€” List existing firewall rules

	Before making changes, always check the current firewall rules.
	ðŸ‘‰ This gives a baseline and ensures you donâ€™t duplicate or conflict with existing 	rules.

Get-NetFirewallRule | Format-Table DisplayName,Enabled,Direction,Action


Step 2 â€” Export current firewall configuration (backup)

	Always backup before making changes.
	ðŸ‘‰ If something goes wrong, you can restore from this .wfw file.

netsh advfirewall export "C:\Users\Public\firewall-export.wfw"


Step 3 â€” Export firewall rules in readable XML format

	The .wfw backup is binary, but XML makes it human-readable.
	ðŸ‘‰ Good for documentation and evidence submission.

Get-NetFirewallRule | Export-Clixml -Path "C:\Users\Public\firewall-rules.xml"


Step 4 â€” Add inbound block rule for Telnet (port 23)

	Telnet is insecure because it sends data in plain text.
	ðŸ‘‰ We block port 23/TCP inbound to prevent attackers from exploiting it.

New-NetFirewallRule -DisplayName "Block-Telnet-Inbound" -Direction Inbound -LocalPort 23 -Protocol TCP -Action Block -Profile Any


Step 5 â€” Verify the new rule

	After creating a rule, confirm it was applied.
	ðŸ‘‰ This shows details like direction, action, and port.

Get-NetFirewallRule -DisplayName "Block-Telnet-Inbound" | Format-List *


Step 6 â€” Test if port 23 is blocked

	We test connectivity to port 23 on localhost.
	ðŸ‘‰ Expected result: TcpTestSucceeded : False â†’ means the firewall is blocking it 	correctly.

Test-NetConnection -ComputerName 127.0.0.1 -Port 23


Step 7 â€” Remove the Telnet block rule

	Once the test is complete, remove the custom rule.
	ðŸ‘‰ Keeps the system clean and prevents accidental issues later.

Remove-NetFirewallRule -DisplayName "Block-Telnet-Inbound"